<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyTool</name>
    </assembly>
    <members>
        <member name="M:MyTool.Tools.CSharpExtension.ArrayExtension.Shuffle``1(``0[],System.Random)">
            <summary>
            随机打乱顺序
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.ArrayExtension.PickOneFieldToArray``2(``0[],System.Func{``0,``1})">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.ArrayExtension.TryGetEmptySlotIndex``1(``0[],System.Int32@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.ArrayExtension.Add``1(``0[],``0,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.ArrayExtension.AddIfNotExist``1(``0[],``0,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.ArrayExtension.IndexOf``1(``0[],``0)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.ArrayExtension.GetNotNullLength``1(``0[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.ArrayExtension.Foreach``1(``0[],System.Action{``0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.ArrayExtension.ForeachSetValue``1(``0[],``0)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.ArrayExtension.ForeachWithoutNull``1(``0[],System.Action{``0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.ArrayExtension.FindIndex``1(``0[],System.Predicate{``0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.ArrayExtension.FindValueIndex``1(``0[],System.Predicate{``0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.ArrayExtension.ContainsValue``1(``0[],System.Predicate{``0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.ArrayExtension.Find``1(``0[],System.Predicate{``0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.ArrayExtension.FindAll``1(``0[],System.Predicate{``0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.ArrayExtension.RemoveAllNull``1(``0[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.ArrayExtension.Expand``1(``0[],System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.ArrayExtension.Remove``1(``0[],``0)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.ArrayExtension.Clear``1(``0[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.ArrayExtension.QuickSort(System.Int32[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.ArrayExtension.BinaryFind(System.Int32[],System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.ArrayExtension.QuickSort(System.Int64[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.ArrayExtension.BinaryFind(System.Int64[],System.Int64)">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.ArrayExtension.Sort``1(``0[],System.Func{``0,``0,System.Boolean})">
            <summary>
            冒泡排序
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.ArrayExtension.BinaryFind``1(``0[],System.Func{``0,System.Int32})">
            <summary>
            自定义二分查找
            【注意】自定义二分查找前先根据对应的字段进行自定义排序！
            需要在外部进行左右侧判断
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.StringExtension.ToTimeString(System.DateTime,System.String)">
            <summary>
            转换为年月日
            </summary>
            <param name="time"></param>
            <param name="format">格式默认yyyy-MM-dd HH:mm:ss.fff zzz</param>
            <returns></returns>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.StringExtension.ToIdString(System.String,System.Char[])">
            <summary>
            转换为合法的ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.StringExtension.ToIllegal(System.String,System.Char[])">
            <summary>
            检测非法字符true代表合法
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.StringExtension.GetTimeStamp(System.DateTime)">
            <summary>
            获得时间戳
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.StringExtension.ToStringChinese(System.Int32)">
            <summary>
            int转换为中文
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSharpExtension.StringExtension.SubstringCount(System.String,System.String)">
            <summary>
            某个字符在字符串中出现的次数
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MyTool.Tools.DOTweenTools.Fade(UnityEngine.UI.Graphic,System.Single,System.Single)" -->
        <member name="M:MyTool.Tools.FileTool.LoadAllFiles(System.String,System.String)">
            <summary>
            获取某个路径下的某个后缀类型的文件
            </summary>
            <param name="path">路径</param>
            <param name="suffix"></param>
            <returns></returns>
        </member>
        <member name="M:MyTool.Tools.FileTool.FindFileSearch(System.String,System.String)">
            <summary>
            查找指定后缀名的文件
            </summary>
            <param name="path">路径</param>
            <param name="pattern">要查找的后缀名如*.txt</param>
            <returns></returns>
        </member>
        <member name="M:MyTool.Tools.FileTool.FindFileSearch(System.IO.DirectoryInfo,System.String)">
            <summary>
            查找指定后缀名的文件
            </summary>
            <param name="d">new DirectoryInfo(path)</param>
            <param name="pattern">要查找的后缀名如*.txt</param>
            <returns></returns>
        </member>
        <member name="M:MyTool.Tools.FileTool.GetAbsolutePath(System.String)">
            <summary>
            获取绝对路径
            </summary>
            <param name="pathName"></param>
            <returns></returns>
        </member>
        <member name="M:MyTool.Tools.FileTool.GetRelativePath(System.String)">
            <summary>
            获取相对路径
            </summary>
            <param name="pathName"></param>
            <returns></returns>
        </member>
        <member name="M:MyTool.Tools.FileTool.GetAssetName(System.String)">
            <summary>
            获取文件名
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:MyTool.Tools.MyTool">
            <summary>
            杂项工具类
            </summary>
        </member>
        <member name="M:MyTool.Tools.MyTool.Timer(System.Int32,System.Action,System.Boolean)">
            <summary>
            Task计时器
            </summary>
            <param name="ms">计时时间(毫秒)</param>
            <param name="over">结束回调</param>
            <param name="loop">是否循环执行</param>
        </member>
        <member name="M:MyTool.Tools.MyTool.Timer(System.Single,ShortcutsCellbackFloat,System.Action,System.Boolean)">
            <summary>
            DoTween倒计时计时器
            </summary>
            <param name="TimeCount">倒计时所需的时间</param>
            <param name="shortcuts">计时进行时的回调</param>
            <param name="overCallback">完成倒计时的回调</param>
            <param name="loop">是否循环执行</param>
            <returns></returns>
        </member>
        <member name="M:MyTool.Tools.MyTool.Timer(System.Single,System.Action,System.Boolean)">
            <summary>
            DoTween倒计时计时器
            </summary>
            <param name="TimeCount">倒计时所需的时间</param>
            <param name="action">完成倒计时的回调</param>
            <param name="loop">是否循环执行</param>
        </member>
        <member name="M:MyTool.Tools.MyTool.RandomGet``1(System.Collections.Generic.List{``0})">
            <summary>
            随机获取List中的一个数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:MyTool.Tools.MyTool.CreateDeepClone``1(``0)">
            <summary>
            返回深复制对象
            </summary>
        </member>
        <member name="M:MyTool.Tools.MyTool.GameObjectClone``1(``0,UnityEngine.Transform)">
            <summary>
            复制GameObject
            </summary>
        </member>
        <member name="M:MyTool.Tools.MyTool.ComponentClone``1(``0,UnityEngine.Transform)">
            <summary>
            复制Component
            </summary>
        </member>
        <member name="M:MyTool.Tools.RigidBodyTool.IsRelativeMove(UnityEngine.Rigidbody)">
            <summary>是否移动?检测velocity</summary>
        </member>
        <member name="M:MyTool.Tools.RigidBodyTool.MoveInTopDown(UnityEngine.Rigidbody,UnityEngine.Vector2,System.Single,UnityEngine.Transform,UnityEngine.Transform)">
            <summary>Topdown角色移动</summary>
        </member>
        <member name="M:MyTool.Tools.RigidBodyTool.MoveInFPS(UnityEngine.Rigidbody,UnityEngine.Vector2,System.Single,System.Single,UnityEngine.Transform)">
            <summary>FPS角色移动</summary>
        </member>
        <member name="M:MyTool.Tools.RigidBodyTool.Falling(UnityEngine.Rigidbody,System.Single,System.Single,System.Single)">
            <summary>下落</summary>
        </member>
        <member name="M:MyTool.Tools.RigidBodyTool.Jump(UnityEngine.Rigidbody,System.Single)">
            <summary>跳</summary>
        </member>
        <member name="M:MyTool.Tools.RigidBodyTool.LookAroundInSpace(UnityEngine.Rigidbody,UnityEngine.Vector2,System.Single,UnityEngine.Transform)">
            <summary>在太空中旋转</summary>
        </member>
        <member name="M:MyTool.Tools.RigidBodyTool.LookAround(UnityEngine.Rigidbody,System.Single,System.Single,UnityEngine.Transform)">
            <summary>在地面左右看</summary>
        </member>
        <member name="M:MyTool.Tools.RigidBodyTool.LookUpOrDownSide(UnityEngine.Rigidbody,System.Single,System.Single,UnityEngine.Transform)">
            <summary>在地面上下看</summary>
        </member>
        <member name="M:MyTool.Tools.RigidBodyTool.CheckAngle(System.Single)">
            <summary>检测角度</summary>
        </member>
        <member name="M:MyTool.Tools.RigidBodyTool.ForwardMove(UnityEngine.Rigidbody,UnityEngine.Transform,System.Single)">
            <summary>
            通过初速度让角色自己前方移动（逐帧调用）
            </summary>
            <param name="trans">要移动的物体</param>
            <param name="moveSpeed">移动速度</param>
        </member>
        <member name="M:MyTool.Tools.RigidBodyTool.FreeJump(UnityEngine.Rigidbody,UnityEngine.Transform,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            根据键盘按键和轮盘方向跳跃（一次性调用）
            </summary>
            <param name="trans">目标物体</param>
            <param name="jumpSpeed">跳跃初速度</param>
            <param name="forwardSpeed">向前初速度</param>
            <param name="h">X轴方向</param>
            <param name="v">y轴方向</param>
        </member>
        <member name="M:MyTool.Tools.Vibration.Vibrate">
            <summary>
            震动
            </summary>
        </member>
        <member name="M:MyTool.Tools.Vibration.Vibrate(System.Int64)">
            <summary>
            震动
            </summary>
        </member>
        <member name="M:MyTool.Tools.Vibration.Vibrate(System.Int64[],System.Int32)">
            <summary>
            震动
            </summary>
        </member>
        <member name="M:MyTool.Tools.Vibration.HasVibrator">
            <summary>
            是否可以震动
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyTool.Tools.Vibration.Cancel">
            <summary>
            取消震动
            </summary>
        </member>
        <member name="M:MyTool.Tools.CSVTool.SaveCSV(System.Data.DataTable,System.String)">
            <summary>
            将DataTable中数据写入到CSV文件中
            </summary>
            <param name="dt">提供保存数据的DataTable</param>
            <param name="fullPath">CSV的文件路径</param>
        </member>
        <member name="M:MyTool.Tools.CSVTool.OpenCSV(System.String)">
            <summary>
            将CSV文件的数据读取到DataTable中
            </summary>
            <param name="filePath">CSV文件路径</param>
            <returns>返回读取了CSV数据的DataTable</returns>
        </member>
        <member name="M:MyTool.Tools.CSVTool.GetType(System.String)">
            给定文件的路径，读取文件的二进制数据，判断文件的编码类型
            <param name="FILE_NAME">文件路径</param>
            <returns>文件的编码类型</returns>
        </member>
        <member name="M:MyTool.Tools.CSVTool.GetType(System.IO.FileStream)">
            通过给定的文件流，判断文件的编码类型
            <param name="fs">文件流</param>
            <returns>文件的编码类型</returns>
        </member>
        <member name="M:MyTool.Tools.CSVTool.IsUTF8Bytes(System.Byte[])">
            判断是否是不带 BOM 的 UTF8 格式
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MyTool.Tools.CSVTool.CreationCSV``1(System.Type)">
            <summary>
            根据类里的字段创建CSV文件
            </summary>
            <param name="t"></param>
        </member>
        <member name="T:MyTool.Tools.Data">
            <summary>
            数据操作工具
            </summary>
        </member>
        <member name="M:MyTool.Tools.Data.XmlListSave``1(System.Collections.Generic.List{``0},System.String,System.String)">
            <summary>
            当前List保存为Xml
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="ff"></param>
            <param name="path">路径</param>
            <param name="filename">文件名（包含后缀）</param>
        </member>
        <member name="M:MyTool.Tools.Data.XmlSingleSave``1(``0,System.String,System.String)">
            <summary>
            当前数据保存为Xml
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="ff"></param>
            <param name="path">路径</param>
            <param name="filename">文件名（包含后缀）</param>
        </member>
        <member name="M:MyTool.Tools.Data.XmlArraySave``1(``0[],System.String,System.String)">
            <summary>
            当前数组保存为Xml
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="ff"></param>
            <param name="path">路径</param>
            <param name="filename">文件名（包含后缀）</param>
        </member>
        <member name="M:MyTool.Tools.Data.XmlListUpdate``1(System.Collections.Generic.List{``0},System.String,System.String)">
            <summary>
            给当前List更新数据
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="ff"></param>
            <param name="path">路径</param>
            <param name="filename">文件名（包含后缀）</param>
        </member>
        <member name="M:MyTool.Tools.Data.XmlSingleUpdate``1(``0,System.String,System.String)">
            <summary>
            添加单个
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="ff"></param>
            <param name="path">路径</param>
            <param name="filename">文件名（包含后缀）</param>
        </member>
        <member name="M:MyTool.Tools.Data.XmlRead``1(System.String,System.String)">
            <summary>
              /// <summary>
            读取XML文件
            </summary>
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="path">路径</param>
            <param name="filename">文件名（包含后缀）</param>
            <returns></returns>
        </member>
        <member name="M:MyTool.Tools.Data.XmlRead``1(System.String,System.String,System.Collections.Generic.List{``0}@)">
            <summary>
            读取XML文件
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="path">路径</param>
            <param name="filename">文件名（包含后缀）</param>
            <param name="ff"></param>
        </member>
        <member name="M:MyTool.Tools.Data.XmlListRemove``1(System.Collections.Generic.List{``0},System.String,System.String)">
            <summary>
            删除XML中某段数据
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="ff"></param>
            <param name="path">路径</param>
            <param name="filename">文件名（包含后缀）</param>
        </member>
        <member name="M:MyTool.Tools.Data.Judge_Equality(System.Reflection.FieldInfo[],System.Reflection.PropertyInfo[],System.Reflection.FieldInfo[],System.Reflection.PropertyInfo[])">
            <summary>
            判断里面的属性和字段的值是否都一致
            </summary>
            <param name="field"></param>
            <param name="property"></param>
            <param name="field2"></param>
            <param name="property2"></param>
            <returns></returns>
        </member>
        <member name="M:MyTool.Tools.Data.XmlSingleRemove``1(``0,System.String,System.String)">
            <summary>
            删除XML中某段数据  单个
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="ff"></param>
            <param name="path">路径</param>
            <param name="filename">文件名（包含后缀）</param>
        </member>
        <member name="M:MyTool.Tools.Data.M_Serialization_Remove``1(``0[],System.String,System.String)">
            <summary>
            删除XML中某段数据 数组
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="ff"></param>
            <param name="path">路径</param>
            <param name="filename">文件名（包含后缀）</param>
        </member>
        <member name="M:MyTool.Tools.Data.UpdateData``1(``0,``0,System.String,System.String)">
            <summary>
            更新数据
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="Quondam_data">之前的数据</param>
            <param name="Now_data">要更换的数据</param>
            <param name="path">路径</param>
            <param name="filename">文件名（包含后缀）</param>
        </member>
        <member name="M:MyTool.Tools.Data.FindData``1(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            在XML文件中根据名字查找值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <param name="changeName"></param>
            <param name="path">路径</param>
            <param name="filename">文件名（包含后缀）</param>
        </member>
        <member name="M:MyTool.Tools.Data.SaveData``1(``0,System.Func{System.String,System.Boolean},System.String)">
            <summary>保存数据到PlayerPrefs</summary>
        </member>
        <member name="M:MyTool.Tools.Data.LoadData``1(System.String)">
            <summary>从PlayerPrefs读取数据</summary>
        </member>
        <member name="T:MyTool.Tools.MathTool">
            <summary>
            数学运算工具
            </summary>
        </member>
        <member name="M:MyTool.Tools.MathTool.GetAngle(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            获取A和B的旋转夹角
            </summary>
            <param name="a">当前的位置</param>
            <param name="target">目标位置</param>
            <returns>角度</returns>
        </member>
        <member name="M:MyTool.Tools.MathTool.RegionDetection(UnityEngine.Vector2,System.Collections.Generic.List{UnityEngine.Vector2})">
            <summary>
            区域检测
            </summary>
            <param name="Target">目标</param>
            <param name="vertexs">顶点List集合</param>
            <returns></returns>
        </member>
        <member name="P:MyTool.Tools.UPool`1.Take">
            <summary>从池中获取一个对象</summary>
        </member>
        <member name="M:MyTool.Tools.UPool`1.#ctor(`0,System.Int32,UnityEngine.Transform,System.Boolean)">
            <summary>
            创建池
            </summary>
            <param name="prefab">对应类型的预制体</param>
            <param name="p">父级</param>
            <param name="PoolSize">初始化生成的数量</param>
            <param name="isCopy">是否开启复制,如果不开启就会在池完的时候把第一个返回,如果开启就会返回一个新的</param>
        </member>
        <member name="M:MyTool.Tools.UPool`1.#ctor(UnityEngine.GameObject,System.Int32,UnityEngine.Transform,System.Boolean)">
            <summary>
            创建池,并且给对象添加对应的脚本
            </summary>
            <param name="prefab">对应类型的预制体</param>
            <param name="p">父级</param>
            <param name="PoolSize">初始化生成的数量</param>
            <param name="isCopy">是否开启复制,如果不开启就会在池完的时候把第一个返回,如果开启就会返回一个新的</param>
        </member>
        <member name="M:MyTool.Tools.UPool`1.CloseAll">
            <summary>
            把全部对象设置为false
            </summary>
        </member>
        <member name="T:MyTool.Tools.UPool`2">
            <summary> 对象池对象传参 </summary>
        </member>
        <member name="P:MyTool.Tools.UPool`2.Take">
            <summary>从池中获取一个对象</summary>
        </member>
        <member name="M:MyTool.Tools.UPool`2.#ctor(`0,`1,System.Int32,UnityEngine.Transform,System.Boolean)">
            <summary>
            创建池
            </summary>
            <param name="prefab">对应类型的预制体</param>
            <param name="p">父级</param>
            <param name="PoolSize">初始化生成的数量</param>
            <param name="isCopy">是否开启复制,如果不开启就会在池完的时候把第一个返回,如果开启就会返回一个新的</param>
        </member>
        <member name="M:MyTool.Tools.UPool`2.#ctor(UnityEngine.GameObject,`1,System.Int32,UnityEngine.Transform,System.Boolean)">
            <summary>
            创建池,并且给对象添加对应的脚本
            </summary>
            <param name="prefab">对应类型的预制体</param>
            <param name="p">父级</param>
            <param name="PoolSize">初始化生成的数量</param>
            <param name="isCopy">是否开启复制,如果不开启就会在池完的时候把第一个返回,如果开启就会返回一个新的</param>
        </member>
        <member name="M:MyTool.Tools.UPool`2.Get">
            <summary>从池中获取一个对象</summary>
        </member>
        <member name="M:MyTool.Tools.UPool`2.Find(System.String)">
            <summary>从池中查找一个对象</summary>
        </member>
        <member name="M:MyTool.Tools.UPool`2.CloseAll">
            <summary>
            把全部对象设置为false
            </summary>
        </member>
        <member name="T:MyTool.Tools.IPoolValue">
            <summary> 对象池对象传参接口 </summary>
        </member>
        <member name="M:MyTool.Tools.IPoolValue.Init``1(``0)">
            <summary>
            给对象传参
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
        </member>
        <member name="M:MyTool.UnityComponents.Database`1.HasKey(System.String)">
            <summary>检查是否包含Key</summary>
        </member>
        <member name="M:MyTool.UnityComponents.Database`1.Get(System.String)">
            <summary>获取对象</summary>
        </member>
        <member name="M:MyTool.UnityComponents.UI_Click.ResetScale">
            <summary>
            重置比例
            </summary>
        </member>
        <member name="M:MyTool.UnityComponents.UI_Click.SetInteractable(System.Boolean,System.Boolean)">
            <summary>
            设置是否禁用
            </summary>
            <param name="interactable"></param>
        </member>
        <member name="M:MyTool.UnityComponents.IUIClickable.SetOnClick(System.Action)">
            <summary>
            设置点击事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:MyTool.UnityComponents.IUIClickable.SetOnDown(System.Action)">
            <summary>
            设置按下事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:MyTool.UnityComponents.IUIClickable.SetOnUp(System.Action)">
            <summary>
            设置抬起事件
            </summary>
            <param name="callback"></param>
        </member>
        <member name="T:MyTool.UnityComponents.UI_Drag">
            <summary>
            拖拽UI元素
            </summary>
        </member>
        <member name="M:MyTool.UnityComponents.UI_Drag.OnBeginDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            开始拖拽的时候
            </summary>
            <param name="eventData"></param>
        </member>
        <member name="M:MyTool.UnityComponents.UI_Drag.OnDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            拖拽中
            </summary>
            <param name="eventData"></param>
        </member>
        <member name="M:MyTool.UnityComponents.UI_Drag.OnEndDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            拖拽完毕
            </summary>
            <param name="eventData"></param>
        </member>
        <member name="M:ConditionalHideAttribute.#ctor(System.String)">
            <summary>
            控制一个目标是否显示隐藏
            </summary>
        </member>
        <member name="M:ConditionalHideAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            控制一个目标是否显示隐藏
            </summary>
        </member>
        <member name="M:ConditionalHideAttribute.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            控制一个目标是否显示隐藏
            </summary>
        </member>
        <member name="M:ConditionalHideAttribute.#ctor(System.Boolean)">
            <summary>
            控制一个目标是否显示隐藏
            </summary>
        </member>
        <member name="M:ConditionalHideAttribute.#ctor(System.String[],System.Boolean[],System.Boolean,System.Boolean)">
            <summary>
            控制一个目标是否显示隐藏
            </summary>
        </member>
        <member name="M:ConditionalHideAttribute.#ctor(System.String[],System.Boolean,System.Boolean)">
            <summary>
            控制一个目标是否显示隐藏
            </summary>
        </member>
        <member name="T:LabelAttribute">
            <summary>
            字段名称标签
            自定义 inspector 字段名称
            </summary>
        </member>
        <member name="P:LabelAttribute.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:LabelAttribute.#ctor(System.String)">
            <summary>
            字段名称
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="T:ShortcutsCellback">
            <summary>
            快捷操作指令
            </summary>
        </member>
        <member name="T:ShortcutsCellbackFloat">
            <summary>
            快捷指令float
            </summary>
        </member>
        <member name="M:ZUI.ZUIWindowBase.Close">
            <summary>关闭当前页面</summary>
        </member>
        <member name="T:ZUIMgr.UIEffect">
            <summary>
            UI打开和关闭的动效
            </summary>
        </member>
        <member name="F:ZUIMgr.UIEffect.Scale">
            <summary>缩放 </summary>
        </member>
        <member name="F:ZUIMgr.UIEffect.Alpha">
            <summary>渐变</summary>
        </member>
        <member name="F:ZUIMgr.UIEffect.Move">
            <summary>移动</summary>
        </member>
        <member name="P:ZUIMgr.IsClose">
            <summary>
            是否还有窗口可以关闭
            </summary>
        </member>
        <member name="M:ZUIMgr.Init(MyTool.UnityComponents.PrefabDatas)">
            <summary>
            初始化UI框架
            </summary>
        </member>
        <member name="M:ZUIMgr.Open``1(System.String,``0,ZUIMgr.UIEffect,System.Action)">
            <summary>
            打开一个有参UI窗口
            </summary>
        </member>
        <member name="M:ZUIMgr.Open(System.String,ZUIMgr.UIEffect,System.Action)">
            <summary>
            打开一个无参UI窗口
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:ZUIMgr.Close(System.Action)">
            <summary>
            关闭最顶上的UI
            </summary>
        </member>
        <member name="M:ZUIMgr.Close(ZUI.ZUIRoot,System.Action)">
            <summary>
            关闭最顶上的UI
            </summary>
        </member>
        <member name="M:ZUIMgr.Close(System.String,System.Action)">
            <summary>
            关闭最顶上的UI
            </summary>
        </member>
    </members>
</doc>
